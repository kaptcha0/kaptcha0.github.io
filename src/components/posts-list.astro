---
import type { CollectionEntry } from 'astro:content';

interface Props {
	posts: CollectionEntry<'blog'>[];
}

const { posts } = Astro.props;
---

<ul class='space-y-4 list-none'>
	{
		posts.map((post) => (
			<li
				key={post.id}
				class='flex items-center space-x-4 p-4 frosted-glass transform transition-transform duration-150 group'>
				<a href={`/blog/${post.id}`} class='flex items-center w-full'>
					<div class='ml-4'>
						<span class='text-sm opacity-70'>
							{post.data.tags.map((tag) => `#${tag}`).join(', ')}
						</span>
						<h2 class='text-xl font-semibold transition-colors group-hover:text-light-accent dark:group-hover:text-dark-accent'>
							{post.data.title}
						</h2>
						<p>{post.data.description}</p>
						<span data-date={post.data.date.toISOString()} class='text-sm opacity-70'>
						</span>
					</div>
				</a>
			</li>
		))
	}
</ul>

<script>
	function formatDateDifference(date: Date): string {
	  const now = new Date();
	  const diffMs = now.getTime() - date.getTime();
	  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

	  if (diffDays < 7) {
	    return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;
	  }

	  const diffWeeks = Math.floor(diffDays / 7);
	  if (diffWeeks < 4) {
	    return `${diffWeeks} week${diffWeeks !== 1 ? 's' : ''} ago`;
	  }

	  const diffMonths = Math.floor(diffDays / 30.44); // average month length

	  if (diffMonths < 12) {
	    return `${diffMonths} month${diffMonths !== 1 ? 's' : ''} ago`;
	  }

	  const diffYears = Math.floor(diffDays / 365.25); // average year length
	  return `${diffYears} year${diffYears !== 1 ? 's' : ''} ago`;
	}

	const dateSpans = document.querySelectorAll('span[data-date]')

	dateSpans.forEach(dateSpan => {
		const date = new Date(dateSpan.dataset.date)
		dateSpan.textContent = date.toLocaleDateString() + ' â€¢ ' + formatDateDifference(date)
	})
</script>
